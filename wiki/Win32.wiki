#summary Epic headache: porting to Windows.

= Introduction =

I've given up on using MinGW to cross-compile from Linux to Win32.  This is mainly because MinGW doesn't support Pthreads.^1^  "Luckily," there's an [http://sourceware.org/pthreads-win32/ open source Pthreads implementation for Win32].  I've successfully used it with Dev-C++ on a Win32 box to resolve that issue.^2^  Now for the nasty:

^1^  *Raj's Question*:  Are you sure MinGW doesn't support Pthreads?  [http://sources.redhat.com/pthreads-win32/faq.html Click here] and read questions 6 and 10.  *Doug's Answer*:  It does.  That's what the aforementioned Pthreads-w32 implementation uses.  I just haven't successfully _cross-compiled_ Pthreaded code with MinGW.

^2^  *Raj's Question*:  Which compiler do you use with Dev-C++?  *Doug's Answer*:  MinGW by default.

= Details =

~~*{{{uint64_t}}}*~~:  Win32 doesn't include this type by default, so we need an {{{#ifdef}}} in [http://gray-matter.googlecode.com/svn/trunk/inc/types.h {{{types.h}}}], if {{{uint64_t}}} isn't defined, to {{{#include <stdint.h>}}}.

*Update*:  Based on a few tests, we've determined {{{#ifdef}}} only works on preprocessor directives and not on any other types of identifiers.  So, in [http://gray-matter.googlecode.com/svn/trunk/inc/gray.h {{{gray.h}}}], we've just included {{{stdint.h}}}.  Most likely, it's implicitly included on Linux, and that's why that type is defined there, so explicitly including it shouldn't hurt anything.

~~*class search*~~:  There's a not-so-obvious recursive dependency problem with respect to {{{class search}}} and {{{class xboard}}} - each depends on the other's declaration.  I started with a simple forward declaration of {{{class search}}} in [http://gray-matter.googlecode.com/svn/trunk/inc/xboard.h {{{xboard.h}}}], but that didn't resolve the issue.  Then, instead of including everything in [http://gray-matter.googlecode.com/svn/trunk/inc/gray.h {{{gray.h}}}], I completely re-hauled the include system to be more "parallel," and this actually worked.  Before you get the tar and feathers, I decided I'd changed too much, so I'm back with the original layout and dependency problem.  Why on earth this isn't an issue on Linux is beyond me.  We may need to put all the classes in a {{{namespace gray}}}, because these generic class names may be causing this problem; {{{class search}}} isn't exactly unique.

*Update*:  We've gone with Doug's include overhaul but abandoned the namespace idea.  It seems to work beautifully.  Oh, we've also tarred and feathered Doug.

~~*{{{ffsll()}}}*~~:  Win32 doesn't come with this function (needed throughout the board class).

*Update*:  We've yoinked GNU's {{{ffsll()}}} and {{{ffs()}}} and put them in the board class.

~~*{{{search.h}}}*~~:  Win32 insists on using the system's {{{search.h}}} instead of Gray Matter's.

*Update*:  We've resolved the problem by including {{{inc/search.h}}} and passing the compiler: {{{-I.}}}

~~*{{{SIGALRM}}}* and *{{{setitimer()}}}*~~:  Steve Ballmer is too busy throwing chairs to implement this signal and function.  According to this Microsoft [http://www.microsoft.com/technet/interopMigration/taskstools/migrate/unix/ucamg/ch05uav3.mspx document], we're supposed to use {{{SetTimer()}}} instead?  Fantastic work, Redmond monkeys.  It would've been easier to make Windows POSIX conformant than to author this document.

*Update*:  We've wrapped the POSIX-specific signal and timer stuff in preprocessor directives.  We've also ganked and hacked the multithreading portion of Doug's cross-platform utility library, [http://jdtaylor.org/ libMetric] (which uses Pthreads on Linux and OS X and Win32 threads on Windows).  Enjoy Gray Matter on Windows.  :-)